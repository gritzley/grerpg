//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from assets/antlr/lib/Spells.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="SpellsParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface ISpellsListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.spell"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSpell([NotNull] SpellsParser.SpellContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.spell"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSpell([NotNull] SpellsParser.SpellContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.imperative"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImperative([NotNull] SpellsParser.ImperativeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.imperative"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImperative([NotNull] SpellsParser.ImperativeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.moveUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMoveUnit([NotNull] SpellsParser.MoveUnitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.moveUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMoveUnit([NotNull] SpellsParser.MoveUnitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.spawnUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSpawnUnit([NotNull] SpellsParser.SpawnUnitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.spawnUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSpawnUnit([NotNull] SpellsParser.SpawnUnitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnit([NotNull] SpellsParser.UnitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnit([NotNull] SpellsParser.UnitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.unitType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnitType([NotNull] SpellsParser.UnitTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.unitType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnitType([NotNull] SpellsParser.UnitTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.unitName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnitName([NotNull] SpellsParser.UnitNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.unitName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnitName([NotNull] SpellsParser.UnitNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.unitDescription"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnitDescription([NotNull] SpellsParser.UnitDescriptionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.unitDescription"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnitDescription([NotNull] SpellsParser.UnitDescriptionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.unitBehaviour"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnitBehaviour([NotNull] SpellsParser.UnitBehaviourContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.unitBehaviour"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnitBehaviour([NotNull] SpellsParser.UnitBehaviourContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.instruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInstruction([NotNull] SpellsParser.InstructionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.instruction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInstruction([NotNull] SpellsParser.InstructionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.action"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAction([NotNull] SpellsParser.ActionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.action"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAction([NotNull] SpellsParser.ActionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.move"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMove([NotNull] SpellsParser.MoveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.move"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMove([NotNull] SpellsParser.MoveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.direction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirection([NotNull] SpellsParser.DirectionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.direction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirection([NotNull] SpellsParser.DirectionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.directionUp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirectionUp([NotNull] SpellsParser.DirectionUpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.directionUp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirectionUp([NotNull] SpellsParser.DirectionUpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.directionDown"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirectionDown([NotNull] SpellsParser.DirectionDownContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.directionDown"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirectionDown([NotNull] SpellsParser.DirectionDownContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.directionLeft"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirectionLeft([NotNull] SpellsParser.DirectionLeftContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.directionLeft"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirectionLeft([NotNull] SpellsParser.DirectionLeftContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.directionRight"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirectionRight([NotNull] SpellsParser.DirectionRightContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.directionRight"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirectionRight([NotNull] SpellsParser.DirectionRightContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.directionRandom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirectionRandom([NotNull] SpellsParser.DirectionRandomContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.directionRandom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirectionRandom([NotNull] SpellsParser.DirectionRandomContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.trigger"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTrigger([NotNull] SpellsParser.TriggerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.trigger"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTrigger([NotNull] SpellsParser.TriggerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SpellsParser.startCombat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStartCombat([NotNull] SpellsParser.StartCombatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SpellsParser.startCombat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStartCombat([NotNull] SpellsParser.StartCombatContext context);
}
