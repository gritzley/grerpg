//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from assets/antlr/lib/Spells.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SpellsLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		FlOAT=18, ONE=19, INT=20, ID=21, WS=22, NL=23;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"FlOAT", "ONE", "INT", "ID", "WS", "NL"
	};


	public SpellsLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SpellsLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'Move a'", "'up to'", "'spaces.'", "'Summon'", "'a'", "'.'", "'-'", 
		"'hp'", "'move'", "'steps'", "'step'", "'up'", "'down'", "'left'", "'right'", 
		"'in a random direction'", "'At the beginning of combat'", null, "'1 '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "FlOAT", "ONE", "INT", "ID", "WS", 
		"NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Spells.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SpellsLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,23,196,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
		1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
		1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,4,19,177,8,19,11,19,
		12,19,178,1,20,4,20,182,8,20,11,20,12,20,183,1,21,1,21,1,21,1,21,1,22,
		4,22,191,8,22,11,22,12,22,192,1,22,1,22,0,0,23,1,1,3,2,5,3,7,4,9,5,11,
		6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
		37,19,39,20,41,21,43,22,45,23,1,0,4,1,0,48,57,2,0,65,90,97,122,2,0,9,9,
		32,32,2,0,10,10,13,13,198,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
		0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
		19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
		0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
		0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,54,1,0,0,0,5,60,
		1,0,0,0,7,68,1,0,0,0,9,75,1,0,0,0,11,77,1,0,0,0,13,79,1,0,0,0,15,81,1,
		0,0,0,17,84,1,0,0,0,19,89,1,0,0,0,21,95,1,0,0,0,23,100,1,0,0,0,25,103,
		1,0,0,0,27,108,1,0,0,0,29,113,1,0,0,0,31,119,1,0,0,0,33,141,1,0,0,0,35,
		168,1,0,0,0,37,172,1,0,0,0,39,176,1,0,0,0,41,181,1,0,0,0,43,185,1,0,0,
		0,45,190,1,0,0,0,47,48,5,77,0,0,48,49,5,111,0,0,49,50,5,118,0,0,50,51,
		5,101,0,0,51,52,5,32,0,0,52,53,5,97,0,0,53,2,1,0,0,0,54,55,5,117,0,0,55,
		56,5,112,0,0,56,57,5,32,0,0,57,58,5,116,0,0,58,59,5,111,0,0,59,4,1,0,0,
		0,60,61,5,115,0,0,61,62,5,112,0,0,62,63,5,97,0,0,63,64,5,99,0,0,64,65,
		5,101,0,0,65,66,5,115,0,0,66,67,5,46,0,0,67,6,1,0,0,0,68,69,5,83,0,0,69,
		70,5,117,0,0,70,71,5,109,0,0,71,72,5,109,0,0,72,73,5,111,0,0,73,74,5,110,
		0,0,74,8,1,0,0,0,75,76,5,97,0,0,76,10,1,0,0,0,77,78,5,46,0,0,78,12,1,0,
		0,0,79,80,5,45,0,0,80,14,1,0,0,0,81,82,5,104,0,0,82,83,5,112,0,0,83,16,
		1,0,0,0,84,85,5,109,0,0,85,86,5,111,0,0,86,87,5,118,0,0,87,88,5,101,0,
		0,88,18,1,0,0,0,89,90,5,115,0,0,90,91,5,116,0,0,91,92,5,101,0,0,92,93,
		5,112,0,0,93,94,5,115,0,0,94,20,1,0,0,0,95,96,5,115,0,0,96,97,5,116,0,
		0,97,98,5,101,0,0,98,99,5,112,0,0,99,22,1,0,0,0,100,101,5,117,0,0,101,
		102,5,112,0,0,102,24,1,0,0,0,103,104,5,100,0,0,104,105,5,111,0,0,105,106,
		5,119,0,0,106,107,5,110,0,0,107,26,1,0,0,0,108,109,5,108,0,0,109,110,5,
		101,0,0,110,111,5,102,0,0,111,112,5,116,0,0,112,28,1,0,0,0,113,114,5,114,
		0,0,114,115,5,105,0,0,115,116,5,103,0,0,116,117,5,104,0,0,117,118,5,116,
		0,0,118,30,1,0,0,0,119,120,5,105,0,0,120,121,5,110,0,0,121,122,5,32,0,
		0,122,123,5,97,0,0,123,124,5,32,0,0,124,125,5,114,0,0,125,126,5,97,0,0,
		126,127,5,110,0,0,127,128,5,100,0,0,128,129,5,111,0,0,129,130,5,109,0,
		0,130,131,5,32,0,0,131,132,5,100,0,0,132,133,5,105,0,0,133,134,5,114,0,
		0,134,135,5,101,0,0,135,136,5,99,0,0,136,137,5,116,0,0,137,138,5,105,0,
		0,138,139,5,111,0,0,139,140,5,110,0,0,140,32,1,0,0,0,141,142,5,65,0,0,
		142,143,5,116,0,0,143,144,5,32,0,0,144,145,5,116,0,0,145,146,5,104,0,0,
		146,147,5,101,0,0,147,148,5,32,0,0,148,149,5,98,0,0,149,150,5,101,0,0,
		150,151,5,103,0,0,151,152,5,105,0,0,152,153,5,110,0,0,153,154,5,110,0,
		0,154,155,5,105,0,0,155,156,5,110,0,0,156,157,5,103,0,0,157,158,5,32,0,
		0,158,159,5,111,0,0,159,160,5,102,0,0,160,161,5,32,0,0,161,162,5,99,0,
		0,162,163,5,111,0,0,163,164,5,109,0,0,164,165,5,98,0,0,165,166,5,97,0,
		0,166,167,5,116,0,0,167,34,1,0,0,0,168,169,3,39,19,0,169,170,5,46,0,0,
		170,171,3,39,19,0,171,36,1,0,0,0,172,173,5,49,0,0,173,174,5,32,0,0,174,
		38,1,0,0,0,175,177,7,0,0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,
		0,0,178,179,1,0,0,0,179,40,1,0,0,0,180,182,7,1,0,0,181,180,1,0,0,0,182,
		183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,42,1,0,0,0,185,186,7,2,
		0,0,186,187,1,0,0,0,187,188,6,21,0,0,188,44,1,0,0,0,189,191,7,3,0,0,190,
		189,1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,194,1,
		0,0,0,194,195,6,22,0,0,195,46,1,0,0,0,4,0,178,183,192,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
