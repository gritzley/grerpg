//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from assets/antlr/Rules.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class RulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		FlOAT=18, ONE=19, INT=20, ID=21, WS=22, NL=23;
	public const int
		RULE_spell = 0, RULE_imperative = 1, RULE_moveUnit = 2, RULE_spawnUnit = 3, 
		RULE_unit = 4, RULE_unitType = 5, RULE_unitName = 6, RULE_unitDescription = 7, 
		RULE_unitBehaviour = 8, RULE_instruction = 9, RULE_action = 10, RULE_move = 11, 
		RULE_direction = 12, RULE_directionUp = 13, RULE_directionDown = 14, RULE_directionLeft = 15, 
		RULE_directionRight = 16, RULE_directionRandom = 17, RULE_targetUnit = 18, 
		RULE_trigger = 19, RULE_startCombat = 20;
	public static readonly string[] ruleNames = {
		"spell", "imperative", "moveUnit", "spawnUnit", "unit", "unitType", "unitName", 
		"unitDescription", "unitBehaviour", "instruction", "action", "move", "direction", 
		"directionUp", "directionDown", "directionLeft", "directionRight", "directionRandom", 
		"targetUnit", "trigger", "startCombat"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Move a'", "'up to'", "'spaces.'", "'Summon'", "'a'", "'.'", "'-'", 
		"'hp'", "'move'", "'steps'", "'step'", "'up'", "'down'", "'left'", "'right'", 
		"'in a random direction'", "'At the beginning of combat'", null, "'1 '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "FlOAT", "ONE", "INT", "ID", "WS", 
		"NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SpellContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RulesParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImperativeContext[] imperative() {
			return GetRuleContexts<ImperativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImperativeContext imperative(int i) {
			return GetRuleContext<ImperativeContext>(i);
		}
		public SpellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spell; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterSpell(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitSpell(this);
		}
	}

	[RuleVersion(0)]
	public SpellContext spell() {
		SpellContext _localctx = new SpellContext(Context, State);
		EnterRule(_localctx, 0, RULE_spell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 42;
				imperative();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 || _la==T__3 );
			State = 47;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImperativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MoveUnitContext moveUnit() {
			return GetRuleContext<MoveUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpawnUnitContext spawnUnit() {
			return GetRuleContext<SpawnUnitContext>(0);
		}
		public ImperativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imperative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterImperative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitImperative(this);
		}
	}

	[RuleVersion(0)]
	public ImperativeContext imperative() {
		ImperativeContext _localctx = new ImperativeContext(Context, State);
		EnterRule(_localctx, 2, RULE_imperative);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				moveUnit();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50;
				spawnUnit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetUnitContext targetUnit() {
			return GetRuleContext<TargetUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		public MoveUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterMoveUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitMoveUnit(this);
		}
	}

	[RuleVersion(0)]
	public MoveUnitContext moveUnit() {
		MoveUnitContext _localctx = new MoveUnitContext(Context, State);
		EnterRule(_localctx, 4, RULE_moveUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(T__0);
			State = 54;
			targetUnit();
			State = 55;
			Match(T__1);
			State = 56;
			Match(INT);
			State = 57;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitNameContext unitName() {
			return GetRuleContext<UnitNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		public SpawnUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterSpawnUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitSpawnUnit(this);
		}
	}

	[RuleVersion(0)]
	public SpawnUnitContext spawnUnit() {
		SpawnUnitContext _localctx = new SpawnUnitContext(Context, State);
		EnterRule(_localctx, 6, RULE_spawnUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(T__3);
			State = 60;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 61;
			unitName();
			State = 62;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitBehaviourContext unitBehaviour() {
			return GetRuleContext<UnitBehaviourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitTypeContext[] unitType() {
			return GetRuleContexts<UnitTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitTypeContext unitType(int i) {
			return GetRuleContext<UnitTypeContext>(i);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 8, RULE_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 64;
				unitType();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 69;
			Match(T__6);
			State = 70;
			Match(INT);
			State = 71;
			Match(T__7);
			State = 72;
			unitBehaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RulesParser.ID, 0); }
		public UnitTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterUnitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitUnitType(this);
		}
	}

	[RuleVersion(0)]
	public UnitTypeContext unitType() {
		UnitTypeContext _localctx = new UnitTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_unitType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(RulesParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(RulesParser.ID, i);
		}
		public UnitNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterUnitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitUnitName(this);
		}
	}

	[RuleVersion(0)]
	public UnitNameContext unitName() {
		UnitNameContext _localctx = new UnitNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_unitName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 76;
				Match(ID);
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitTypeContext[] unitType() {
			return GetRuleContexts<UnitTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitTypeContext unitType(int i) {
			return GetRuleContext<UnitTypeContext>(i);
		}
		public UnitDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterUnitDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitUnitDescription(this);
		}
	}

	[RuleVersion(0)]
	public UnitDescriptionContext unitDescription() {
		UnitDescriptionContext _localctx = new UnitDescriptionContext(Context, State);
		EnterRule(_localctx, 14, RULE_unitDescription);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 81;
				unitType();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitBehaviourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public UnitBehaviourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitBehaviour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterUnitBehaviour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitUnitBehaviour(this);
		}
	}

	[RuleVersion(0)]
	public UnitBehaviourContext unitBehaviour() {
		UnitBehaviourContext _localctx = new UnitBehaviourContext(Context, State);
		EnterRule(_localctx, 16, RULE_unitBehaviour);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 86;
				instruction();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__16 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggerContext trigger() {
			return GetRuleContext<TriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 18, RULE_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			trigger();
			State = 92;
			action();
			State = 93;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 20, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			move();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(RulesParser.ONE, 0); }
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 22, RULE_move);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				Match(T__8);
				State = 98;
				Match(INT);
				State = 99;
				Match(T__9);
				State = 100;
				direction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				Match(T__8);
				State = 102;
				Match(ONE);
				State = 103;
				Match(T__10);
				State = 104;
				direction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectionUpContext directionUp() {
			return GetRuleContext<DirectionUpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionDownContext directionDown() {
			return GetRuleContext<DirectionDownContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionLeftContext directionLeft() {
			return GetRuleContext<DirectionLeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionRightContext directionRight() {
			return GetRuleContext<DirectionRightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionRandomContext directionRandom() {
			return GetRuleContext<DirectionRandomContext>(0);
		}
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 24, RULE_direction);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				directionUp();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				directionDown();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109;
				directionLeft();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 4);
				{
				State = 110;
				directionRight();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 5);
				{
				State = 111;
				directionRandom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionUpContext : ParserRuleContext {
		public DirectionUpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionUp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDirectionUp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDirectionUp(this);
		}
	}

	[RuleVersion(0)]
	public DirectionUpContext directionUp() {
		DirectionUpContext _localctx = new DirectionUpContext(Context, State);
		EnterRule(_localctx, 26, RULE_directionUp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionDownContext : ParserRuleContext {
		public DirectionDownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionDown; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDirectionDown(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDirectionDown(this);
		}
	}

	[RuleVersion(0)]
	public DirectionDownContext directionDown() {
		DirectionDownContext _localctx = new DirectionDownContext(Context, State);
		EnterRule(_localctx, 28, RULE_directionDown);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionLeftContext : ParserRuleContext {
		public DirectionLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionLeft; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDirectionLeft(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDirectionLeft(this);
		}
	}

	[RuleVersion(0)]
	public DirectionLeftContext directionLeft() {
		DirectionLeftContext _localctx = new DirectionLeftContext(Context, State);
		EnterRule(_localctx, 30, RULE_directionLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionRightContext : ParserRuleContext {
		public DirectionRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionRight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDirectionRight(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDirectionRight(this);
		}
	}

	[RuleVersion(0)]
	public DirectionRightContext directionRight() {
		DirectionRightContext _localctx = new DirectionRightContext(Context, State);
		EnterRule(_localctx, 32, RULE_directionRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionRandomContext : ParserRuleContext {
		public DirectionRandomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionRandom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDirectionRandom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDirectionRandom(this);
		}
	}

	[RuleVersion(0)]
	public DirectionRandomContext directionRandom() {
		DirectionRandomContext _localctx = new DirectionRandomContext(Context, State);
		EnterRule(_localctx, 34, RULE_directionRandom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitDescriptionContext unitDescription() {
			return GetRuleContext<UnitDescriptionContext>(0);
		}
		public TargetUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterTargetUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitTargetUnit(this);
		}
	}

	[RuleVersion(0)]
	public TargetUnitContext targetUnit() {
		TargetUnitContext _localctx = new TargetUnitContext(Context, State);
		EnterRule(_localctx, 36, RULE_targetUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			unitDescription();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StartCombatContext startCombat() {
			return GetRuleContext<StartCombatContext>(0);
		}
		public TriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitTrigger(this);
		}
	}

	[RuleVersion(0)]
	public TriggerContext trigger() {
		TriggerContext _localctx = new TriggerContext(Context, State);
		EnterRule(_localctx, 38, RULE_trigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			startCombat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartCombatContext : ParserRuleContext {
		public StartCombatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startCombat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterStartCombat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitStartCombat(this);
		}
	}

	[RuleVersion(0)]
	public StartCombatContext startCombat() {
		StartCombatContext _localctx = new StartCombatContext(Context, State);
		EnterRule(_localctx, 40, RULE_startCombat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,23,131,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,4,0,44,
		8,0,11,0,12,0,45,1,0,1,0,1,1,1,1,3,1,52,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
		3,1,3,1,3,1,3,1,3,1,4,4,4,66,8,4,11,4,12,4,67,1,4,1,4,1,4,1,4,1,4,1,5,
		1,5,1,6,4,6,78,8,6,11,6,12,6,79,1,7,4,7,83,8,7,11,7,12,7,84,1,8,4,8,88,
		8,8,11,8,12,8,89,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,3,11,106,8,11,1,12,1,12,1,12,1,12,1,12,3,12,113,8,12,1,13,
		1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
		1,20,1,20,0,0,21,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,0,1,2,0,5,5,20,20,120,0,43,1,0,0,0,2,51,1,0,0,0,4,53,1,0,0,0,6,59,1,
		0,0,0,8,65,1,0,0,0,10,74,1,0,0,0,12,77,1,0,0,0,14,82,1,0,0,0,16,87,1,0,
		0,0,18,91,1,0,0,0,20,95,1,0,0,0,22,105,1,0,0,0,24,112,1,0,0,0,26,114,1,
		0,0,0,28,116,1,0,0,0,30,118,1,0,0,0,32,120,1,0,0,0,34,122,1,0,0,0,36,124,
		1,0,0,0,38,126,1,0,0,0,40,128,1,0,0,0,42,44,3,2,1,0,43,42,1,0,0,0,44,45,
		1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,47,1,0,0,0,47,48,5,0,0,1,48,1,1,
		0,0,0,49,52,3,4,2,0,50,52,3,6,3,0,51,49,1,0,0,0,51,50,1,0,0,0,52,3,1,0,
		0,0,53,54,5,1,0,0,54,55,3,36,18,0,55,56,5,2,0,0,56,57,5,20,0,0,57,58,5,
		3,0,0,58,5,1,0,0,0,59,60,5,4,0,0,60,61,7,0,0,0,61,62,3,12,6,0,62,63,5,
		6,0,0,63,7,1,0,0,0,64,66,3,10,5,0,65,64,1,0,0,0,66,67,1,0,0,0,67,65,1,
		0,0,0,67,68,1,0,0,0,68,69,1,0,0,0,69,70,5,7,0,0,70,71,5,20,0,0,71,72,5,
		8,0,0,72,73,3,16,8,0,73,9,1,0,0,0,74,75,5,21,0,0,75,11,1,0,0,0,76,78,5,
		21,0,0,77,76,1,0,0,0,78,79,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,13,1,
		0,0,0,81,83,3,10,5,0,82,81,1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,
		0,0,0,85,15,1,0,0,0,86,88,3,18,9,0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,
		0,0,0,89,90,1,0,0,0,90,17,1,0,0,0,91,92,3,38,19,0,92,93,3,20,10,0,93,94,
		5,6,0,0,94,19,1,0,0,0,95,96,3,22,11,0,96,21,1,0,0,0,97,98,5,9,0,0,98,99,
		5,20,0,0,99,100,5,10,0,0,100,106,3,24,12,0,101,102,5,9,0,0,102,103,5,19,
		0,0,103,104,5,11,0,0,104,106,3,24,12,0,105,97,1,0,0,0,105,101,1,0,0,0,
		106,23,1,0,0,0,107,113,3,26,13,0,108,113,3,28,14,0,109,113,3,30,15,0,110,
		113,3,32,16,0,111,113,3,34,17,0,112,107,1,0,0,0,112,108,1,0,0,0,112,109,
		1,0,0,0,112,110,1,0,0,0,112,111,1,0,0,0,113,25,1,0,0,0,114,115,5,12,0,
		0,115,27,1,0,0,0,116,117,5,13,0,0,117,29,1,0,0,0,118,119,5,14,0,0,119,
		31,1,0,0,0,120,121,5,15,0,0,121,33,1,0,0,0,122,123,5,16,0,0,123,35,1,0,
		0,0,124,125,3,14,7,0,125,37,1,0,0,0,126,127,3,40,20,0,127,39,1,0,0,0,128,
		129,5,17,0,0,129,41,1,0,0,0,8,45,51,67,79,84,89,105,112
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
