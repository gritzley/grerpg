//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from assets/antlr/Rules.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class RulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		NAME=25, UP_TO=26, FORWARDS_LEFT=27, FORWARDS_RIGHT=28, BACKWARDS_LEFT=29, 
		BACKWARDS_RIGHT=30, FORWARDS=31, BACKWARDS=32, LEFT=33, RIGHT=34, AROUND=35, 
		IT=36, START_COMBAT=37, ACTIVATE=38, FlOAT=39, ONE=40, INT=41, WS=42, 
		NL=43;
	public const int
		RULE_spell = 0, RULE_imperative = 1, RULE_moveUnit = 2, RULE_spawnUnit = 3, 
		RULE_summonCardInHand = 4, RULE_destroyUnits = 5, RULE_chooseUnit = 6, 
		RULE_unitFightsUnit = 7, RULE_unitSelector = 8, RULE_unit = 9, RULE_stats = 10, 
		RULE_type = 11, RULE_behaviour = 12, RULE_instruction = 13, RULE_action = 14, 
		RULE_move = 15, RULE_turn = 16, RULE_damage = 17, RULE_stepAmount = 18, 
		RULE_directionOR = 19, RULE_direction = 20, RULE_targetUnit = 21, RULE_unitDescription = 22, 
		RULE_trigger = 23;
	public static readonly string[] ruleNames = {
		"spell", "imperative", "moveUnit", "spawnUnit", "summonCardInHand", "destroyUnits", 
		"chooseUnit", "unitFightsUnit", "unitSelector", "unit", "stats", "type", 
		"behaviour", "instruction", "action", "move", "turn", "damage", "stepAmount", 
		"directionOR", "direction", "targetUnit", "unitDescription", "trigger"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Move'", "'and'", "'.'", "'Summon'", "'Put'", "'into your hand.'", 
		"'Destroy each'", "'Pick'", "'fights'", "'unit'", "'-'", "'/'", "'Knight'", 
		"'Rogue'", "', then'", "'move'", "'turn'", "'deal'", "'damage'", "'steps'", 
		"'step'", "','", "'or'", "'target'", null, "'up to'", "'forwards left'", 
		"'forwards right'", "'backwards left'", "'backwards right'", "'forwards'", 
		"'backwards'", "'left'", "'right'", "'around'", null, "'At the beginning of combat'", 
		"'When this unit is activated'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "NAME", "UP_TO", "FORWARDS_LEFT", "FORWARDS_RIGHT", "BACKWARDS_LEFT", 
		"BACKWARDS_RIGHT", "FORWARDS", "BACKWARDS", "LEFT", "RIGHT", "AROUND", 
		"IT", "START_COMBAT", "ACTIVATE", "FlOAT", "ONE", "INT", "WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SpellContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RulesParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImperativeContext[] imperative() {
			return GetRuleContexts<ImperativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImperativeContext imperative(int i) {
			return GetRuleContext<ImperativeContext>(i);
		}
		public SpellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spell; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterSpell(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitSpell(this);
		}
	}

	[RuleVersion(0)]
	public SpellContext spell() {
		SpellContext _localctx = new SpellContext(Context, State);
		EnterRule(_localctx, 0, RULE_spell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 48;
				imperative();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 68736254386L) != 0 );
			State = 53;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImperativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MoveUnitContext moveUnit() {
			return GetRuleContext<MoveUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpawnUnitContext spawnUnit() {
			return GetRuleContext<SpawnUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummonCardInHandContext summonCardInHand() {
			return GetRuleContext<SummonCardInHandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DestroyUnitsContext destroyUnits() {
			return GetRuleContext<DestroyUnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChooseUnitContext chooseUnit() {
			return GetRuleContext<ChooseUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitFightsUnitContext unitFightsUnit() {
			return GetRuleContext<UnitFightsUnitContext>(0);
		}
		public ImperativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imperative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterImperative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitImperative(this);
		}
	}

	[RuleVersion(0)]
	public ImperativeContext imperative() {
		ImperativeContext _localctx = new ImperativeContext(Context, State);
		EnterRule(_localctx, 2, RULE_imperative);
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55;
				moveUnit();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				spawnUnit();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 57;
				summonCardInHand();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 58;
				destroyUnits();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 5);
				{
				State = 59;
				chooseUnit();
				}
				break;
			case T__23:
			case IT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 60;
				unitFightsUnit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetUnitContext targetUnit() {
			return GetRuleContext<TargetUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UP_TO() { return GetToken(RulesParser.UP_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StepAmountContext stepAmount() {
			return GetRuleContext<StepAmountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionORContext[] directionOR() {
			return GetRuleContexts<DirectionORContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionORContext directionOR(int i) {
			return GetRuleContext<DirectionORContext>(i);
		}
		public MoveUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterMoveUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitMoveUnit(this);
		}
	}

	[RuleVersion(0)]
	public MoveUnitContext moveUnit() {
		MoveUnitContext _localctx = new MoveUnitContext(Context, State);
		EnterRule(_localctx, 4, RULE_moveUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(T__0);
			State = 64;
			targetUnit();
			State = 65;
			Match(UP_TO);
			State = 66;
			stepAmount();
			State = 67;
			directionOR();
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 68;
				Match(T__1);
				State = 69;
				directionOR();
				}
			}

			State = 72;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RulesParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(RulesParser.ONE, 0); }
		public SpawnUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterSpawnUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitSpawnUnit(this);
		}
	}

	[RuleVersion(0)]
	public SpawnUnitContext spawnUnit() {
		SpawnUnitContext _localctx = new SpawnUnitContext(Context, State);
		EnterRule(_localctx, 6, RULE_spawnUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(T__3);
			State = 75;
			_la = TokenStream.LA(1);
			if ( !(_la==ONE || _la==INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 76;
			Match(NAME);
			State = 77;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummonCardInHandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RulesParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(RulesParser.ONE, 0); }
		public SummonCardInHandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summonCardInHand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterSummonCardInHand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitSummonCardInHand(this);
		}
	}

	[RuleVersion(0)]
	public SummonCardInHandContext summonCardInHand() {
		SummonCardInHandContext _localctx = new SummonCardInHandContext(Context, State);
		EnterRule(_localctx, 8, RULE_summonCardInHand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(T__4);
			State = 80;
			_la = TokenStream.LA(1);
			if ( !(_la==ONE || _la==INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 81;
			Match(NAME);
			State = 82;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestroyUnitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitSelectorContext unitSelector() {
			return GetRuleContext<UnitSelectorContext>(0);
		}
		public DestroyUnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destroyUnits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDestroyUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDestroyUnits(this);
		}
	}

	[RuleVersion(0)]
	public DestroyUnitsContext destroyUnits() {
		DestroyUnitsContext _localctx = new DestroyUnitsContext(Context, State);
		EnterRule(_localctx, 10, RULE_destroyUnits);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(T__6);
			State = 85;
			unitSelector();
			State = 86;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChooseUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetUnitContext targetUnit() {
			return GetRuleContext<TargetUnitContext>(0);
		}
		public ChooseUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chooseUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterChooseUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitChooseUnit(this);
		}
	}

	[RuleVersion(0)]
	public ChooseUnitContext chooseUnit() {
		ChooseUnitContext _localctx = new ChooseUnitContext(Context, State);
		EnterRule(_localctx, 12, RULE_chooseUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(T__7);
			State = 89;
			targetUnit();
			State = 90;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitFightsUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetUnitContext[] targetUnit() {
			return GetRuleContexts<TargetUnitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TargetUnitContext targetUnit(int i) {
			return GetRuleContext<TargetUnitContext>(i);
		}
		public UnitFightsUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitFightsUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterUnitFightsUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitUnitFightsUnit(this);
		}
	}

	[RuleVersion(0)]
	public UnitFightsUnitContext unitFightsUnit() {
		UnitFightsUnitContext _localctx = new UnitFightsUnitContext(Context, State);
		EnterRule(_localctx, 14, RULE_unitFightsUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			targetUnit();
			State = 93;
			Match(T__8);
			State = 94;
			targetUnit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public UnitSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterUnitSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitUnitSelector(this);
		}
	}

	[RuleVersion(0)]
	public UnitSelectorContext unitSelector() {
		UnitSelectorContext _localctx = new UnitSelectorContext(Context, State);
		EnterRule(_localctx, 16, RULE_unitSelector);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				Match(T__9);
				}
				break;
			case T__12:
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatsContext stats() {
			return GetRuleContext<StatsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BehaviourContext behaviour() {
			return GetRuleContext<BehaviourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 18, RULE_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 100;
				type();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__12 || _la==T__13 );
			State = 105;
			Match(T__10);
			State = 106;
			stats();
			State = 107;
			behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(RulesParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(RulesParser.INT, i);
		}
		public StatsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stats; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterStats(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitStats(this);
		}
	}

	[RuleVersion(0)]
	public StatsContext stats() {
		StatsContext _localctx = new StatsContext(Context, State);
		EnterRule(_localctx, 20, RULE_stats);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(INT);
			State = 110;
			Match(T__11);
			State = 111;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BehaviourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public BehaviourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behaviour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterBehaviour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitBehaviour(this);
		}
	}

	[RuleVersion(0)]
	public BehaviourContext behaviour() {
		BehaviourContext _localctx = new BehaviourContext(Context, State);
		EnterRule(_localctx, 24, RULE_behaviour);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==START_COMBAT || _la==ACTIVATE) {
				{
				{
				State = 115;
				instruction();
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggerContext trigger() {
			return GetRuleContext<TriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 26, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			trigger();
			State = 122;
			action();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 123;
				Match(T__14);
				State = 124;
				action();
				}
			}

			State = 127;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TurnContext turn() {
			return GetRuleContext<TurnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DamageContext damage() {
			return GetRuleContext<DamageContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 28, RULE_action);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				move();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130;
				turn();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 131;
				damage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UP_TO() { return GetToken(RulesParser.UP_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StepAmountContext stepAmount() {
			return GetRuleContext<StepAmountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 30, RULE_move);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(T__15);
			State = 135;
			Match(UP_TO);
			State = 136;
			stepAmount();
			State = 137;
			direction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(RulesParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(RulesParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AROUND() { return GetToken(RulesParser.AROUND, 0); }
		public TurnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterTurn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitTurn(this);
		}
	}

	[RuleVersion(0)]
	public TurnContext turn() {
		TurnContext _localctx = new TurnContext(Context, State);
		EnterRule(_localctx, 32, RULE_turn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(T__16);
			State = 140;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 60129542144L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		public DamageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDamage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDamage(this);
		}
	}

	[RuleVersion(0)]
	public DamageContext damage() {
		DamageContext _localctx = new DamageContext(Context, State);
		EnterRule(_localctx, 34, RULE_damage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(T__17);
			State = 143;
			Match(INT);
			State = 144;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepAmountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(RulesParser.ONE, 0); }
		public StepAmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepAmount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterStepAmount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitStepAmount(this);
		}
	}

	[RuleVersion(0)]
	public StepAmountContext stepAmount() {
		StepAmountContext _localctx = new StepAmountContext(Context, State);
		EnterRule(_localctx, 36, RULE_stepAmount);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				Match(INT);
				State = 147;
				Match(T__19);
				}
				break;
			case ONE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				Match(ONE);
				State = 149;
				Match(T__20);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionORContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext[] direction() {
			return GetRuleContexts<DirectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction(int i) {
			return GetRuleContext<DirectionContext>(i);
		}
		public DirectionORContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionOR; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDirectionOR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDirectionOR(this);
		}
	}

	[RuleVersion(0)]
	public DirectionORContext directionOR() {
		DirectionORContext _localctx = new DirectionORContext(Context, State);
		EnterRule(_localctx, 38, RULE_directionOR);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			direction();
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21 || _la==T__22) {
				{
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__21) {
					{
					{
					State = 153;
					Match(T__21);
					State = 154;
					direction();
					}
					}
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 160;
				Match(T__22);
				State = 161;
				direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDS() { return GetToken(RulesParser.FORWARDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARDS() { return GetToken(RulesParser.BACKWARDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(RulesParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(RulesParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDS_LEFT() { return GetToken(RulesParser.FORWARDS_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDS_RIGHT() { return GetToken(RulesParser.FORWARDS_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARDS_LEFT() { return GetToken(RulesParser.BACKWARDS_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARDS_RIGHT() { return GetToken(RulesParser.BACKWARDS_RIGHT, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 40, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 34225520640L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitDescriptionContext unitDescription() {
			return GetRuleContext<UnitDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IT() { return GetToken(RulesParser.IT, 0); }
		public TargetUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterTargetUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitTargetUnit(this);
		}
	}

	[RuleVersion(0)]
	public TargetUnitContext targetUnit() {
		TargetUnitContext _localctx = new TargetUnitContext(Context, State);
		EnterRule(_localctx, 42, RULE_targetUnit);
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				Match(T__23);
				State = 167;
				unitDescription();
				}
				break;
			case IT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				Match(IT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public UnitDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterUnitDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitUnitDescription(this);
		}
	}

	[RuleVersion(0)]
	public UnitDescriptionContext unitDescription() {
		UnitDescriptionContext _localctx = new UnitDescriptionContext(Context, State);
		EnterRule(_localctx, 44, RULE_unitDescription);
		int _la;
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 171;
					type();
					}
					}
					State = 174;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__12 || _la==T__13 );
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				Match(T__9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_COMBAT() { return GetToken(RulesParser.START_COMBAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVATE() { return GetToken(RulesParser.ACTIVATE, 0); }
		public TriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitTrigger(this);
		}
	}

	[RuleVersion(0)]
	public TriggerContext trigger() {
		TriggerContext _localctx = new TriggerContext(Context, State);
		EnterRule(_localctx, 46, RULE_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_la = TokenStream.LA(1);
			if ( !(_la==START_COMBAT || _la==ACTIVATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,43,182,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,4,0,50,8,0,11,0,12,0,51,1,0,1,0,1,1,1,1,1,1,1,
		1,1,1,1,1,3,1,62,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,71,8,2,1,2,1,2,1,
		3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
		1,7,1,7,1,7,1,7,1,8,1,8,3,8,99,8,8,1,9,4,9,102,8,9,11,9,12,9,103,1,9,1,
		9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,5,12,117,8,12,10,12,12,12,
		120,9,12,1,13,1,13,1,13,1,13,3,13,126,8,13,1,13,1,13,1,14,1,14,1,14,3,
		14,133,8,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
		1,18,1,18,1,18,1,18,3,18,151,8,18,1,19,1,19,1,19,5,19,156,8,19,10,19,12,
		19,159,9,19,1,19,1,19,3,19,163,8,19,1,20,1,20,1,21,1,21,1,21,3,21,170,
		8,21,1,22,4,22,173,8,22,11,22,12,22,174,1,22,3,22,178,8,22,1,23,1,23,1,
		23,0,0,24,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,0,5,1,0,40,41,1,0,13,14,1,0,33,35,1,0,27,34,1,0,37,38,176,0,49,1,
		0,0,0,2,61,1,0,0,0,4,63,1,0,0,0,6,74,1,0,0,0,8,79,1,0,0,0,10,84,1,0,0,
		0,12,88,1,0,0,0,14,92,1,0,0,0,16,98,1,0,0,0,18,101,1,0,0,0,20,109,1,0,
		0,0,22,113,1,0,0,0,24,118,1,0,0,0,26,121,1,0,0,0,28,132,1,0,0,0,30,134,
		1,0,0,0,32,139,1,0,0,0,34,142,1,0,0,0,36,150,1,0,0,0,38,152,1,0,0,0,40,
		164,1,0,0,0,42,169,1,0,0,0,44,177,1,0,0,0,46,179,1,0,0,0,48,50,3,2,1,0,
		49,48,1,0,0,0,50,51,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,53,1,0,0,0,
		53,54,5,0,0,1,54,1,1,0,0,0,55,62,3,4,2,0,56,62,3,6,3,0,57,62,3,8,4,0,58,
		62,3,10,5,0,59,62,3,12,6,0,60,62,3,14,7,0,61,55,1,0,0,0,61,56,1,0,0,0,
		61,57,1,0,0,0,61,58,1,0,0,0,61,59,1,0,0,0,61,60,1,0,0,0,62,3,1,0,0,0,63,
		64,5,1,0,0,64,65,3,42,21,0,65,66,5,26,0,0,66,67,3,36,18,0,67,70,3,38,19,
		0,68,69,5,2,0,0,69,71,3,38,19,0,70,68,1,0,0,0,70,71,1,0,0,0,71,72,1,0,
		0,0,72,73,5,3,0,0,73,5,1,0,0,0,74,75,5,4,0,0,75,76,7,0,0,0,76,77,5,25,
		0,0,77,78,5,3,0,0,78,7,1,0,0,0,79,80,5,5,0,0,80,81,7,0,0,0,81,82,5,25,
		0,0,82,83,5,6,0,0,83,9,1,0,0,0,84,85,5,7,0,0,85,86,3,16,8,0,86,87,5,3,
		0,0,87,11,1,0,0,0,88,89,5,8,0,0,89,90,3,42,21,0,90,91,5,3,0,0,91,13,1,
		0,0,0,92,93,3,42,21,0,93,94,5,9,0,0,94,95,3,42,21,0,95,15,1,0,0,0,96,99,
		5,10,0,0,97,99,3,22,11,0,98,96,1,0,0,0,98,97,1,0,0,0,99,17,1,0,0,0,100,
		102,3,22,11,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,0,0,103,104,
		1,0,0,0,104,105,1,0,0,0,105,106,5,11,0,0,106,107,3,20,10,0,107,108,3,24,
		12,0,108,19,1,0,0,0,109,110,5,41,0,0,110,111,5,12,0,0,111,112,5,41,0,0,
		112,21,1,0,0,0,113,114,7,1,0,0,114,23,1,0,0,0,115,117,3,26,13,0,116,115,
		1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,25,1,0,0,0,
		120,118,1,0,0,0,121,122,3,46,23,0,122,125,3,28,14,0,123,124,5,15,0,0,124,
		126,3,28,14,0,125,123,1,0,0,0,125,126,1,0,0,0,126,127,1,0,0,0,127,128,
		5,3,0,0,128,27,1,0,0,0,129,133,3,30,15,0,130,133,3,32,16,0,131,133,3,34,
		17,0,132,129,1,0,0,0,132,130,1,0,0,0,132,131,1,0,0,0,133,29,1,0,0,0,134,
		135,5,16,0,0,135,136,5,26,0,0,136,137,3,36,18,0,137,138,3,40,20,0,138,
		31,1,0,0,0,139,140,5,17,0,0,140,141,7,2,0,0,141,33,1,0,0,0,142,143,5,18,
		0,0,143,144,5,41,0,0,144,145,5,19,0,0,145,35,1,0,0,0,146,147,5,41,0,0,
		147,151,5,20,0,0,148,149,5,40,0,0,149,151,5,21,0,0,150,146,1,0,0,0,150,
		148,1,0,0,0,151,37,1,0,0,0,152,162,3,40,20,0,153,154,5,22,0,0,154,156,
		3,40,20,0,155,153,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,
		0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,5,23,0,0,161,163,3,40,20,0,
		162,157,1,0,0,0,162,163,1,0,0,0,163,39,1,0,0,0,164,165,7,3,0,0,165,41,
		1,0,0,0,166,167,5,24,0,0,167,170,3,44,22,0,168,170,5,36,0,0,169,166,1,
		0,0,0,169,168,1,0,0,0,170,43,1,0,0,0,171,173,3,22,11,0,172,171,1,0,0,0,
		173,174,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,178,1,0,0,0,176,178,
		5,10,0,0,177,172,1,0,0,0,177,176,1,0,0,0,178,45,1,0,0,0,179,180,7,4,0,
		0,180,47,1,0,0,0,14,51,61,70,98,103,118,125,132,150,157,162,169,174,177
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
