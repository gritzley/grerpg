//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from assets/antlr/Rules.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class RulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, NAME=20, UP_TO=21, FORWARDS=22, BACKWARDS=23, LEFT=24, 
		RIGHT=25, AROUND=26, FORWARDS_LEFT=27, FORWARDS_RIGHT=28, BACKWARDS_LEFT=29, 
		BACKWARDS_RIGHT=30, IT=31, START_COMBAT=32, ACTIVATE=33, FlOAT=34, ONE=35, 
		INT=36, ID=37, WS=38, NL=39;
	public const int
		RULE_spell = 0, RULE_imperative = 1, RULE_moveUnit = 2, RULE_spawnUnit = 3, 
		RULE_summonCardInHand = 4, RULE_unit = 5, RULE_stats = 6, RULE_type = 7, 
		RULE_behaviour = 8, RULE_instruction = 9, RULE_action = 10, RULE_move = 11, 
		RULE_turn = 12, RULE_damage = 13, RULE_stepAmount = 14, RULE_directionOR = 15, 
		RULE_direction = 16, RULE_targetUnit = 17, RULE_unitDescription = 18, 
		RULE_trigger = 19;
	public static readonly string[] ruleNames = {
		"spell", "imperative", "moveUnit", "spawnUnit", "summonCardInHand", "unit", 
		"stats", "type", "behaviour", "instruction", "action", "move", "turn", 
		"damage", "stepAmount", "directionOR", "direction", "targetUnit", "unitDescription", 
		"trigger"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Move'", "'and'", "'.'", "'Summon'", "'Put'", "'into your hand.'", 
		"'-'", "'/'", "'Knight'", "', then'", "'move'", "'turn'", "'deal'", "'damage'", 
		"'steps'", "'step'", "','", "'or'", "'target'", null, "'up to'", "'forwards'", 
		"'backwards'", "'left'", "'right'", "'around'", "'forwards left'", null, 
		"'backwards left'", null, "'it'", "'At the beginning of combat'", "'When this unit is activated'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "NAME", "UP_TO", "FORWARDS", 
		"BACKWARDS", "LEFT", "RIGHT", "AROUND", "FORWARDS_LEFT", "FORWARDS_RIGHT", 
		"BACKWARDS_LEFT", "BACKWARDS_RIGHT", "IT", "START_COMBAT", "ACTIVATE", 
		"FlOAT", "ONE", "INT", "ID", "WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SpellContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RulesParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImperativeContext[] imperative() {
			return GetRuleContexts<ImperativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImperativeContext imperative(int i) {
			return GetRuleContext<ImperativeContext>(i);
		}
		public SpellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spell; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterSpell(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitSpell(this);
		}
	}

	[RuleVersion(0)]
	public SpellContext spell() {
		SpellContext _localctx = new SpellContext(Context, State);
		EnterRule(_localctx, 0, RULE_spell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 40;
				imperative();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 50L) != 0 );
			State = 45;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImperativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MoveUnitContext moveUnit() {
			return GetRuleContext<MoveUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpawnUnitContext spawnUnit() {
			return GetRuleContext<SpawnUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummonCardInHandContext summonCardInHand() {
			return GetRuleContext<SummonCardInHandContext>(0);
		}
		public ImperativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imperative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterImperative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitImperative(this);
		}
	}

	[RuleVersion(0)]
	public ImperativeContext imperative() {
		ImperativeContext _localctx = new ImperativeContext(Context, State);
		EnterRule(_localctx, 2, RULE_imperative);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47;
				moveUnit();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				spawnUnit();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 49;
				summonCardInHand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetUnitContext targetUnit() {
			return GetRuleContext<TargetUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UP_TO() { return GetToken(RulesParser.UP_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StepAmountContext stepAmount() {
			return GetRuleContext<StepAmountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionORContext[] directionOR() {
			return GetRuleContexts<DirectionORContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionORContext directionOR(int i) {
			return GetRuleContext<DirectionORContext>(i);
		}
		public MoveUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterMoveUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitMoveUnit(this);
		}
	}

	[RuleVersion(0)]
	public MoveUnitContext moveUnit() {
		MoveUnitContext _localctx = new MoveUnitContext(Context, State);
		EnterRule(_localctx, 4, RULE_moveUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(T__0);
			State = 53;
			targetUnit();
			State = 54;
			Match(UP_TO);
			State = 55;
			stepAmount();
			State = 56;
			directionOR();
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 57;
				Match(T__1);
				State = 58;
				directionOR();
				}
			}

			State = 61;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpawnUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RulesParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(RulesParser.ONE, 0); }
		public SpawnUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spawnUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterSpawnUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitSpawnUnit(this);
		}
	}

	[RuleVersion(0)]
	public SpawnUnitContext spawnUnit() {
		SpawnUnitContext _localctx = new SpawnUnitContext(Context, State);
		EnterRule(_localctx, 6, RULE_spawnUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(T__3);
			State = 64;
			_la = TokenStream.LA(1);
			if ( !(_la==ONE || _la==INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 65;
			Match(NAME);
			State = 66;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummonCardInHandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(RulesParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(RulesParser.ONE, 0); }
		public SummonCardInHandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summonCardInHand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterSummonCardInHand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitSummonCardInHand(this);
		}
	}

	[RuleVersion(0)]
	public SummonCardInHandContext summonCardInHand() {
		SummonCardInHandContext _localctx = new SummonCardInHandContext(Context, State);
		EnterRule(_localctx, 8, RULE_summonCardInHand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(T__4);
			State = 69;
			_la = TokenStream.LA(1);
			if ( !(_la==ONE || _la==INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 70;
			Match(NAME);
			State = 71;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatsContext stats() {
			return GetRuleContext<StatsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BehaviourContext behaviour() {
			return GetRuleContext<BehaviourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 10, RULE_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 73;
				type();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__8 );
			State = 78;
			Match(T__6);
			State = 79;
			stats();
			State = 80;
			behaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(RulesParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(RulesParser.INT, i);
		}
		public StatsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stats; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterStats(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitStats(this);
		}
	}

	[RuleVersion(0)]
	public StatsContext stats() {
		StatsContext _localctx = new StatsContext(Context, State);
		EnterRule(_localctx, 12, RULE_stats);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(INT);
			State = 83;
			Match(T__7);
			State = 84;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BehaviourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public BehaviourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_behaviour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterBehaviour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitBehaviour(this);
		}
	}

	[RuleVersion(0)]
	public BehaviourContext behaviour() {
		BehaviourContext _localctx = new BehaviourContext(Context, State);
		EnterRule(_localctx, 16, RULE_behaviour);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 88;
				instruction();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==START_COMBAT || _la==ACTIVATE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggerContext trigger() {
			return GetRuleContext<TriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext[] action() {
			return GetRuleContexts<ActionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 18, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			trigger();
			State = 94;
			action();
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 95;
				Match(T__9);
				State = 96;
				action();
				}
			}

			State = 99;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TurnContext turn() {
			return GetRuleContext<TurnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DamageContext damage() {
			return GetRuleContext<DamageContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 20, RULE_action);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 101;
				move();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				turn();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 3);
				{
				State = 103;
				damage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UP_TO() { return GetToken(RulesParser.UP_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StepAmountContext stepAmount() {
			return GetRuleContext<StepAmountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 22, RULE_move);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(T__10);
			State = 107;
			Match(UP_TO);
			State = 108;
			stepAmount();
			State = 109;
			direction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(RulesParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(RulesParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AROUND() { return GetToken(RulesParser.AROUND, 0); }
		public TurnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterTurn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitTurn(this);
		}
	}

	[RuleVersion(0)]
	public TurnContext turn() {
		TurnContext _localctx = new TurnContext(Context, State);
		EnterRule(_localctx, 24, RULE_turn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(T__11);
			State = 112;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 117440512L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DamageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		public DamageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_damage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDamage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDamage(this);
		}
	}

	[RuleVersion(0)]
	public DamageContext damage() {
		DamageContext _localctx = new DamageContext(Context, State);
		EnterRule(_localctx, 26, RULE_damage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(T__12);
			State = 115;
			Match(INT);
			State = 116;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepAmountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(RulesParser.ONE, 0); }
		public StepAmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepAmount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterStepAmount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitStepAmount(this);
		}
	}

	[RuleVersion(0)]
	public StepAmountContext stepAmount() {
		StepAmountContext _localctx = new StepAmountContext(Context, State);
		EnterRule(_localctx, 28, RULE_stepAmount);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				Match(INT);
				State = 119;
				Match(T__14);
				}
				break;
			case ONE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				Match(ONE);
				State = 121;
				Match(T__15);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionORContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext[] direction() {
			return GetRuleContexts<DirectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction(int i) {
			return GetRuleContext<DirectionContext>(i);
		}
		public DirectionORContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionOR; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDirectionOR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDirectionOR(this);
		}
	}

	[RuleVersion(0)]
	public DirectionORContext directionOR() {
		DirectionORContext _localctx = new DirectionORContext(Context, State);
		EnterRule(_localctx, 30, RULE_directionOR);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			direction();
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16 || _la==T__17) {
				{
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 125;
					Match(T__16);
					State = 126;
					direction();
					}
					}
					State = 131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 132;
				Match(T__17);
				State = 133;
				direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDS() { return GetToken(RulesParser.FORWARDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARDS() { return GetToken(RulesParser.BACKWARDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(RulesParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(RulesParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDS_LEFT() { return GetToken(RulesParser.FORWARDS_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDS_RIGHT() { return GetToken(RulesParser.FORWARDS_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARDS_LEFT() { return GetToken(RulesParser.BACKWARDS_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARDS_RIGHT() { return GetToken(RulesParser.BACKWARDS_RIGHT, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 32, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2076180480L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitDescriptionContext unitDescription() {
			return GetRuleContext<UnitDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IT() { return GetToken(RulesParser.IT, 0); }
		public TargetUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterTargetUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitTargetUnit(this);
		}
	}

	[RuleVersion(0)]
	public TargetUnitContext targetUnit() {
		TargetUnitContext _localctx = new TargetUnitContext(Context, State);
		EnterRule(_localctx, 34, RULE_targetUnit);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				Match(T__18);
				State = 139;
				unitDescription();
				}
				break;
			case IT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140;
				Match(IT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public UnitDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterUnitDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitUnitDescription(this);
		}
	}

	[RuleVersion(0)]
	public UnitDescriptionContext unitDescription() {
		UnitDescriptionContext _localctx = new UnitDescriptionContext(Context, State);
		EnterRule(_localctx, 36, RULE_unitDescription);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 143;
				type();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__8 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_COMBAT() { return GetToken(RulesParser.START_COMBAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVATE() { return GetToken(RulesParser.ACTIVATE, 0); }
		public TriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.EnterTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRulesListener typedListener = listener as IRulesListener;
			if (typedListener != null) typedListener.ExitTrigger(this);
		}
	}

	[RuleVersion(0)]
	public TriggerContext trigger() {
		TriggerContext _localctx = new TriggerContext(Context, State);
		EnterRule(_localctx, 38, RULE_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_la = TokenStream.LA(1);
			if ( !(_la==START_COMBAT || _la==ACTIVATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,39,151,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,4,0,42,8,0,11,0,
		12,0,43,1,0,1,0,1,1,1,1,1,1,3,1,51,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
		60,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,4,5,75,8,5,
		11,5,12,5,76,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,4,8,90,8,8,11,
		8,12,8,91,1,9,1,9,1,9,1,9,3,9,98,8,9,1,9,1,9,1,10,1,10,1,10,3,10,105,8,
		10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,
		14,1,14,1,14,3,14,123,8,14,1,15,1,15,1,15,5,15,128,8,15,10,15,12,15,131,
		9,15,1,15,1,15,3,15,135,8,15,1,16,1,16,1,17,1,17,1,17,3,17,142,8,17,1,
		18,4,18,145,8,18,11,18,12,18,146,1,19,1,19,1,19,0,0,20,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,0,4,1,0,35,36,1,0,24,26,2,0,22,
		25,27,30,1,0,32,33,144,0,41,1,0,0,0,2,50,1,0,0,0,4,52,1,0,0,0,6,63,1,0,
		0,0,8,68,1,0,0,0,10,74,1,0,0,0,12,82,1,0,0,0,14,86,1,0,0,0,16,89,1,0,0,
		0,18,93,1,0,0,0,20,104,1,0,0,0,22,106,1,0,0,0,24,111,1,0,0,0,26,114,1,
		0,0,0,28,122,1,0,0,0,30,124,1,0,0,0,32,136,1,0,0,0,34,141,1,0,0,0,36,144,
		1,0,0,0,38,148,1,0,0,0,40,42,3,2,1,0,41,40,1,0,0,0,42,43,1,0,0,0,43,41,
		1,0,0,0,43,44,1,0,0,0,44,45,1,0,0,0,45,46,5,0,0,1,46,1,1,0,0,0,47,51,3,
		4,2,0,48,51,3,6,3,0,49,51,3,8,4,0,50,47,1,0,0,0,50,48,1,0,0,0,50,49,1,
		0,0,0,51,3,1,0,0,0,52,53,5,1,0,0,53,54,3,34,17,0,54,55,5,21,0,0,55,56,
		3,28,14,0,56,59,3,30,15,0,57,58,5,2,0,0,58,60,3,30,15,0,59,57,1,0,0,0,
		59,60,1,0,0,0,60,61,1,0,0,0,61,62,5,3,0,0,62,5,1,0,0,0,63,64,5,4,0,0,64,
		65,7,0,0,0,65,66,5,20,0,0,66,67,5,3,0,0,67,7,1,0,0,0,68,69,5,5,0,0,69,
		70,7,0,0,0,70,71,5,20,0,0,71,72,5,6,0,0,72,9,1,0,0,0,73,75,3,14,7,0,74,
		73,1,0,0,0,75,76,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,78,1,0,0,0,78,
		79,5,7,0,0,79,80,3,12,6,0,80,81,3,16,8,0,81,11,1,0,0,0,82,83,5,36,0,0,
		83,84,5,8,0,0,84,85,5,36,0,0,85,13,1,0,0,0,86,87,5,9,0,0,87,15,1,0,0,0,
		88,90,3,18,9,0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,
		92,17,1,0,0,0,93,94,3,38,19,0,94,97,3,20,10,0,95,96,5,10,0,0,96,98,3,20,
		10,0,97,95,1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,99,100,5,3,0,0,100,19,1,
		0,0,0,101,105,3,22,11,0,102,105,3,24,12,0,103,105,3,26,13,0,104,101,1,
		0,0,0,104,102,1,0,0,0,104,103,1,0,0,0,105,21,1,0,0,0,106,107,5,11,0,0,
		107,108,5,21,0,0,108,109,3,28,14,0,109,110,3,32,16,0,110,23,1,0,0,0,111,
		112,5,12,0,0,112,113,7,1,0,0,113,25,1,0,0,0,114,115,5,13,0,0,115,116,5,
		36,0,0,116,117,5,14,0,0,117,27,1,0,0,0,118,119,5,36,0,0,119,123,5,15,0,
		0,120,121,5,35,0,0,121,123,5,16,0,0,122,118,1,0,0,0,122,120,1,0,0,0,123,
		29,1,0,0,0,124,134,3,32,16,0,125,126,5,17,0,0,126,128,3,32,16,0,127,125,
		1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,132,1,0,0,
		0,131,129,1,0,0,0,132,133,5,18,0,0,133,135,3,32,16,0,134,129,1,0,0,0,134,
		135,1,0,0,0,135,31,1,0,0,0,136,137,7,2,0,0,137,33,1,0,0,0,138,139,5,19,
		0,0,139,142,3,36,18,0,140,142,5,31,0,0,141,138,1,0,0,0,141,140,1,0,0,0,
		142,35,1,0,0,0,143,145,3,14,7,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,
		1,0,0,0,146,147,1,0,0,0,147,37,1,0,0,0,148,149,7,3,0,0,149,39,1,0,0,0,
		12,43,50,59,76,91,97,104,122,129,134,141,146
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
