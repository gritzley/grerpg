//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from assets/antlr/lib/Units.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class UnitsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, FlOAT=13, ONE=14, INT=15, ID=16, WS=17, NL=18;
	public const int
		RULE_unit = 0, RULE_unitType = 1, RULE_unitName = 2, RULE_unitDescription = 3, 
		RULE_unitBehaviour = 4, RULE_instruction = 5, RULE_action = 6, RULE_move = 7, 
		RULE_direction = 8, RULE_directionUp = 9, RULE_directionDown = 10, RULE_directionLeft = 11, 
		RULE_directionRight = 12, RULE_directionRandom = 13, RULE_trigger = 14, 
		RULE_startCombat = 15;
	public static readonly string[] ruleNames = {
		"unit", "unitType", "unitName", "unitDescription", "unitBehaviour", "instruction", 
		"action", "move", "direction", "directionUp", "directionDown", "directionLeft", 
		"directionRight", "directionRandom", "trigger", "startCombat"
	};

	private static readonly string[] _LiteralNames = {
		null, "'-'", "'hp'", "'.'", "'move'", "'steps'", "'step'", "'up'", "'down'", 
		"'left'", "'right'", "'in a random direction'", "'At the beginning of combat'", 
		null, "'1 '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "FlOAT", "ONE", "INT", "ID", "WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Units.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static UnitsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UnitsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UnitsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class UnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(UnitsParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitBehaviourContext unitBehaviour() {
			return GetRuleContext<UnitBehaviourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitTypeContext[] unitType() {
			return GetRuleContexts<UnitTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitTypeContext unitType(int i) {
			return GetRuleContext<UnitTypeContext>(i);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 32;
				unitType();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 37;
			Match(T__0);
			State = 38;
			Match(INT);
			State = 39;
			Match(T__1);
			State = 40;
			unitBehaviour();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(UnitsParser.ID, 0); }
		public UnitTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterUnitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitUnitType(this);
		}
	}

	[RuleVersion(0)]
	public UnitTypeContext unitType() {
		UnitTypeContext _localctx = new UnitTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_unitType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(UnitsParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(UnitsParser.ID, i);
		}
		public UnitNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterUnitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitUnitName(this);
		}
	}

	[RuleVersion(0)]
	public UnitNameContext unitName() {
		UnitNameContext _localctx = new UnitNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_unitName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 44;
				Match(ID);
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitTypeContext[] unitType() {
			return GetRuleContexts<UnitTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitTypeContext unitType(int i) {
			return GetRuleContext<UnitTypeContext>(i);
		}
		public UnitDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterUnitDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitUnitDescription(this);
		}
	}

	[RuleVersion(0)]
	public UnitDescriptionContext unitDescription() {
		UnitDescriptionContext _localctx = new UnitDescriptionContext(Context, State);
		EnterRule(_localctx, 6, RULE_unitDescription);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 49;
				unitType();
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitBehaviourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public UnitBehaviourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitBehaviour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterUnitBehaviour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitUnitBehaviour(this);
		}
	}

	[RuleVersion(0)]
	public UnitBehaviourContext unitBehaviour() {
		UnitBehaviourContext _localctx = new UnitBehaviourContext(Context, State);
		EnterRule(_localctx, 8, RULE_unitBehaviour);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 54;
				instruction();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__11 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggerContext trigger() {
			return GetRuleContext<TriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 10, RULE_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			trigger();
			State = 60;
			action();
			State = 61;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MoveContext move() {
			return GetRuleContext<MoveContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 12, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			move();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(UnitsParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(UnitsParser.ONE, 0); }
		public MoveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterMove(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitMove(this);
		}
	}

	[RuleVersion(0)]
	public MoveContext move() {
		MoveContext _localctx = new MoveContext(Context, State);
		EnterRule(_localctx, 14, RULE_move);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				Match(T__3);
				State = 66;
				Match(INT);
				State = 67;
				Match(T__4);
				State = 68;
				direction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				Match(T__3);
				State = 70;
				Match(ONE);
				State = 71;
				Match(T__5);
				State = 72;
				direction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectionUpContext directionUp() {
			return GetRuleContext<DirectionUpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionDownContext directionDown() {
			return GetRuleContext<DirectionDownContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionLeftContext directionLeft() {
			return GetRuleContext<DirectionLeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionRightContext directionRight() {
			return GetRuleContext<DirectionRightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionRandomContext directionRandom() {
			return GetRuleContext<DirectionRandomContext>(0);
		}
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 16, RULE_direction);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				directionUp();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				directionDown();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77;
				directionLeft();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 4);
				{
				State = 78;
				directionRight();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 5);
				{
				State = 79;
				directionRandom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionUpContext : ParserRuleContext {
		public DirectionUpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionUp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterDirectionUp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitDirectionUp(this);
		}
	}

	[RuleVersion(0)]
	public DirectionUpContext directionUp() {
		DirectionUpContext _localctx = new DirectionUpContext(Context, State);
		EnterRule(_localctx, 18, RULE_directionUp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionDownContext : ParserRuleContext {
		public DirectionDownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionDown; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterDirectionDown(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitDirectionDown(this);
		}
	}

	[RuleVersion(0)]
	public DirectionDownContext directionDown() {
		DirectionDownContext _localctx = new DirectionDownContext(Context, State);
		EnterRule(_localctx, 20, RULE_directionDown);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionLeftContext : ParserRuleContext {
		public DirectionLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionLeft; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterDirectionLeft(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitDirectionLeft(this);
		}
	}

	[RuleVersion(0)]
	public DirectionLeftContext directionLeft() {
		DirectionLeftContext _localctx = new DirectionLeftContext(Context, State);
		EnterRule(_localctx, 22, RULE_directionLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionRightContext : ParserRuleContext {
		public DirectionRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionRight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterDirectionRight(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitDirectionRight(this);
		}
	}

	[RuleVersion(0)]
	public DirectionRightContext directionRight() {
		DirectionRightContext _localctx = new DirectionRightContext(Context, State);
		EnterRule(_localctx, 24, RULE_directionRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionRandomContext : ParserRuleContext {
		public DirectionRandomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directionRandom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterDirectionRandom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitDirectionRandom(this);
		}
	}

	[RuleVersion(0)]
	public DirectionRandomContext directionRandom() {
		DirectionRandomContext _localctx = new DirectionRandomContext(Context, State);
		EnterRule(_localctx, 26, RULE_directionRandom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StartCombatContext startCombat() {
			return GetRuleContext<StartCombatContext>(0);
		}
		public TriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitTrigger(this);
		}
	}

	[RuleVersion(0)]
	public TriggerContext trigger() {
		TriggerContext _localctx = new TriggerContext(Context, State);
		EnterRule(_localctx, 28, RULE_trigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			startCombat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartCombatContext : ParserRuleContext {
		public StartCombatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startCombat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.EnterStartCombat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IUnitsListener typedListener = listener as IUnitsListener;
			if (typedListener != null) typedListener.ExitStartCombat(this);
		}
	}

	[RuleVersion(0)]
	public StartCombatContext startCombat() {
		StartCombatContext _localctx = new StartCombatContext(Context, State);
		EnterRule(_localctx, 30, RULE_startCombat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,18,97,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,4,0,34,8,0,11,0,12,0,35,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,
		4,2,46,8,2,11,2,12,2,47,1,3,4,3,51,8,3,11,3,12,3,52,1,4,4,4,56,8,4,11,
		4,12,4,57,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,
		74,8,7,1,8,1,8,1,8,1,8,1,8,3,8,81,8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
		1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,0,0,16,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,0,0,89,0,33,1,0,0,0,2,42,1,0,0,0,4,45,1,0,0,0,6,50,1,
		0,0,0,8,55,1,0,0,0,10,59,1,0,0,0,12,63,1,0,0,0,14,73,1,0,0,0,16,80,1,0,
		0,0,18,82,1,0,0,0,20,84,1,0,0,0,22,86,1,0,0,0,24,88,1,0,0,0,26,90,1,0,
		0,0,28,92,1,0,0,0,30,94,1,0,0,0,32,34,3,2,1,0,33,32,1,0,0,0,34,35,1,0,
		0,0,35,33,1,0,0,0,35,36,1,0,0,0,36,37,1,0,0,0,37,38,5,1,0,0,38,39,5,15,
		0,0,39,40,5,2,0,0,40,41,3,8,4,0,41,1,1,0,0,0,42,43,5,16,0,0,43,3,1,0,0,
		0,44,46,5,16,0,0,45,44,1,0,0,0,46,47,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,
		0,48,5,1,0,0,0,49,51,3,2,1,0,50,49,1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,
		52,53,1,0,0,0,53,7,1,0,0,0,54,56,3,10,5,0,55,54,1,0,0,0,56,57,1,0,0,0,
		57,55,1,0,0,0,57,58,1,0,0,0,58,9,1,0,0,0,59,60,3,28,14,0,60,61,3,12,6,
		0,61,62,5,3,0,0,62,11,1,0,0,0,63,64,3,14,7,0,64,13,1,0,0,0,65,66,5,4,0,
		0,66,67,5,15,0,0,67,68,5,5,0,0,68,74,3,16,8,0,69,70,5,4,0,0,70,71,5,14,
		0,0,71,72,5,6,0,0,72,74,3,16,8,0,73,65,1,0,0,0,73,69,1,0,0,0,74,15,1,0,
		0,0,75,81,3,18,9,0,76,81,3,20,10,0,77,81,3,22,11,0,78,81,3,24,12,0,79,
		81,3,26,13,0,80,75,1,0,0,0,80,76,1,0,0,0,80,77,1,0,0,0,80,78,1,0,0,0,80,
		79,1,0,0,0,81,17,1,0,0,0,82,83,5,7,0,0,83,19,1,0,0,0,84,85,5,8,0,0,85,
		21,1,0,0,0,86,87,5,9,0,0,87,23,1,0,0,0,88,89,5,10,0,0,89,25,1,0,0,0,90,
		91,5,11,0,0,91,27,1,0,0,0,92,93,3,30,15,0,93,29,1,0,0,0,94,95,5,12,0,0,
		95,31,1,0,0,0,6,35,47,52,57,73,80
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
